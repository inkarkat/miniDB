#!/bin/bash
###############################################################################
##
# FILE:		miniTX
# PRODUCT:	tools
# AUTHOR:	Ingo Karkat <ingo@karkat.de>
# DATE CREATED:	04-Apr-2019
#
###############################################################################
# CONTENTS:
#   Lightweight transactions for miniDB.
#
# REMARKS:
#
# @(#)miniTX	$Id$	tools
###############################################################################
set -o noglob
shopt -qs extglob

method="${1:?}"; shift
TABLE_FILESPEC="${1:?}"; shift
LOCK_FILESPEC="${1:?}"; shift
thisTransactionOwner="${1:?}"; shift
thisTransactionMode="${1:?}"; shift
thisTransactionTimeout="${1?}"; shift

: ${NOW:=$(date +%s)}

readLock()
{
    IFS=' ' read -r lockExpiry lockMode lockOwner < "$LOCK_FILESPEC"
}
isLockExpired()
{
    if [ $NOW -gt $lockExpiry ]; then
	diff=$((NOW - lockExpiry))
	diffPlural=s; [ $diff -eq 1 ] && diffPlural=
	return 0
    else
	return 1
    fi
}
createLock()
{
    printf > "$LOCK_FILESPEC" '%s %s %s\n' "$((NOW + thisTransactionTimeout))" "$thisTransactionMode" "$thisTransactionOwner"
    if [ -e "$TABLE_FILESPEC" ]; then
	cat -- "$TABLE_FILESPEC" >> "$LOCK_FILESPEC"
    fi
}
rollback()
{
    local recordLen="$(head -n 1 -- "$LOCK_FILESPEC" | wc --bytes)"
    if cmp --silent --ignore-initial="${recordLen}:0" "$LOCK_FILESPEC" "$TABLE_FILESPEC"; then
	return 99
    else
	tail -n +2 "$LOCK_FILESPEC" > "$TABLE_FILESPEC"
    fi
}
removeLock()
{
    rm -f "$LOCK_FILESPEC"
}

case "$method" in
    TX-START)
	if readLock; then
	    if isLockExpired; then
		if rollback; then
		    printf >&2 'Warning: Previous %s transaction by %s timed out %d second%s ago and has been rolled back.\n' "$lockMode" "$lockOwner" "$diff" "$diffPlural"
		else
		    printf >&2 'Warning: Previous %s transaction by %s timed out %d second%s ago but did not do any changes.\n' "$lockMode" "$lockOwner" "$diff" "$diffPlural"
		fi
	    else
		if [ "$lockOwner" = "$thisTransactionOwner" ]; then
		    printf >&2 'ERROR: Another %s transaction by %s is already in progress.\n' "$lockMode" "$lockOwner"
		    exit 1
		else
		    printf 'Timed out while another %s transaction by %s is in progress.\n' "$lockMode" "$lockOwner"
		    exit 0
		fi
	    fi
	fi
	createLock
	;;
    TX-END)
	if readLock; then
	    if [ "$lockOwner" = "$thisTransactionOwner" ]; then
		if isLockExpired; then
		    printf >&2 'Warning: Current transaction timed out %d second%s ago.\n' "$diff" "$diffPlural"
		fi
	    else
		printf >&2 'ERROR: Another transaction by %s has been started; any changes have been lost.\n' "$lockOwner"
		exit 6
	    fi
	else
	    printf >&2 'ERROR: Not inside a transaction, or the transaction has timed out and another transaction was completed.\n'
	    removeLock
	    exit 6
	fi
	removeLock
	;;
    TX-ABORT)
	if readLock; then
	    if [ "$lockOwner" != "$thisTransactionOwner" ]; then
		printf >&2 'Warning: Another transaction by %s has been started; any changes have been lost, anyway.\n' "$lockOwner"
		exit 0
	    elif [ "$lockMode" != 'write' ]; then
		echo >&2 'ERROR: Not in a write transaction.'
		exit 2
	    fi
	    rollback
	else
	    printf >&2 'Warning: Not inside a transaction, or the transaction has timed out and another transaction was completed.\n'
	fi
	removeLock
	;;
    TX-CHECK)
	if readLock; then
	    if [ "$lockOwner" = "$thisTransactionOwner" ]; then
		if isLockExpired; then
		    case "$thisTransactionMode" in
			read)	printf >&2 'Warning: Current transaction timed out %d second%s ago.\n' "$diff" "$diffPlural";;
			write)	printf >&2 'ERROR: Current transaction timed out %d second%s ago.\n' "$diff" "$diffPlural"; exit 6;;
		    esac
		fi
	    else
		printf >&2 'ERROR: Another transaction by %s has been started; any changes have been lost.\n' "$lockOwner"
		exit 6
	    fi
	else
	    printf >&2 'ERROR: Not inside a transaction, or the transaction has timed out and another transaction was completed.\n'
	    exit 6
	fi
	;;
    *)
	printf >&2 'ASSERT: Invalid method: %s\n' "$method"
	exit 2
	;;
esac
